import logging

from aiogram import types, Dispatcher
from tgbot.keyboards.default.main_menu_kb import main_menukb
from tgbot.misc.db_api.schemas import quick_commands as commands
from tgbot.misc.identificator_generator import generate_identificator


async def admin_bot_start(message: types.Message):
    try:
        user = await commands.select_user(message.from_user.id)
        user_id = user.id
        if message.from_user.id == user_id:
            identificator = user.identificator
            await message.answer(f"üëæ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                                 f"–í—ã —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
                                 f"üõÇ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <pre>{identificator}</pre>",
                                 reply_markup=main_menukb)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    except Exception:
        identificator = generate_identificator()
        await commands.add_admin(id=message.from_user.id,
                                 name=message.from_user.full_name)
        await commands.add_user(id=message.from_user.id,
                                name=message.from_user.full_name)
        await commands.update_user_identificator(id=message.from_user.id,
                                                 identificator=identificator)
        await commands.update_user_balance(id=message.from_user.id, balance=10)
        await message.answer(f"üëæ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª –í–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤,"
                             f" —Ç–µ–ø–µ—Ä—å –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                             f"üõÇ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <pre>{identificator}</pre>",
                             reply_markup=main_menukb)
        logging.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        pass


async def bot_start(message: types.Message):
    try:
        user = await commands.select_user(message.from_user.id)
        user_id = user.id
        if message.from_user.id == user_id:
            identificator = user.identificator
            await message.answer(f"üëæ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                                 f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã —Ç—É–≥—Ä–∏–∫–∏!\n\n"
                                 f"üõÇ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <pre>{identificator}</pre>",
                                 reply_markup=main_menukb)
            logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    except Exception:
        identificator = generate_identificator()
        await commands.add_user(id=message.from_user.id,
                                name=message.from_user.full_name)

        await commands.update_user_identificator(id=message.from_user.id,
                                                 identificator=identificator)
        await commands.update_user_balance(id=message.from_user.id, balance=10)
        await message.answer(f"üëæ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             f"–ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–æ—Ç–∞ –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>10 —Ç—É–≥—Ä–∏–∫–æ–≤</b> üíé\n\n"
                             f"üõÇ –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <pre>{identificator}</pre>, \n"
                             f"–æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è.",
                             reply_markup=main_menukb)
        logging.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        pass


def register_bot_start(dp: Dispatcher):
    dp.register_message_handler(admin_bot_start, commands=["start"], state="*", is_admin=True)
    dp.register_message_handler(bot_start, commands=["start"], state="*")
